# sed "s|{{IMAGE}}|jupyter|g; s|{{TAG}}|v0.0.0|g; s|{{URL_TLS}}|$(URL_TLS=www.jupyterhub.internationalbrainlab.org,jupyter.internationalbrainlab.org python3 -c "print('\\\n        '.join([f'- \"{d}\"' for d in __import__('os').getenv('URL_TLS').split(',')]))")|g; s|{{URL_RULE}}|$(URL_RULE=www.vathes.com,vathes.com python3 -c "print('\\\n    '.join([f'- host: \"{d}\"\\\n      http:\\\n        paths:\\\n          - backend:\\\n              serviceName: {{{{APP_NAME}}}}-app\\\n              servicePort: 80' for d in __import__('os').getenv('URL_RULE').split(',')]))")|g; s|{{APP_NAME}}|vathes-com|g" ./k8s_deploy.yaml | kubectl apply -f -
apiVersion: v1
kind: Service
metadata:
  name: {{APP_NAME}}-app
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
  selector:
    app: {{APP_NAME}}-app
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{APP_NAME}}-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{APP_NAME}}-app
  template:
    metadata:
      labels:
        app: {{APP_NAME}}-app
        # iam.amazonaws.com/role: k8s_admin
    spec:
      imagePullSecrets:
        - name: external-registry-creds
      containers:
        - name: {{APP_NAME}}
          image: registry.vathes.com/datajoint/{{IMAGE}}:{{TAG}}
          ports:
            - containerPort: 80
          resources:
            requests:
              cpu: 100m
            limits:
              cpu: 100m
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: {{APP_NAME}}-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    # cert-manager.io/cluster-issuer: letsencrypt-staging
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
    - hosts:
        {{URL_TLS}}
      secretName: {{APP_NAME}}-tls
  rules:
    {{URL_RULE}}

